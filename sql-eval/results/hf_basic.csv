db_name,query_category,question,query,db_type,generated_query,reason,error_msg,exact_match,correct,error_query_gen,error_db_exec,timeout,latency_seconds,tokens_used,instructions,k_shot_prompt,glossary,table_metadata_string,prev_invalid_sql,prev_error_msg,question_0,query_0,question_1,query_1,cot_instructions,cot_pregen
broker,basic_group_order_limit,What are the top 3 transaction statuses by number of transactions? Return the status and number of transactions.,"SELECT sbTxStatus, COUNT(*) AS num_transactions FROM sbTransaction GROUP BY sbTxStatus ORDER BY num_transactions DESC LIMIT 3",postgres,"SELECT sbTxStatus,  count(*) FROM sbTransaction GROUP BY sbTxStatus ORDER BY count(*) DESC LIMIT 3;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
broker,basic_group_order_limit,What are the top 5 countries by number of customers? Return the country name and number of customers.,"SELECT sbCustCountry, COUNT(*) AS num_customers FROM sbCustomer GROUP BY sbCustCountry ORDER BY num_customers DESC LIMIT 5",postgres,"SELECT sbCustCountry, COUNT(*) AS number_of_customers FROM sbCustomer GROUP BY sbCustCountry ORDER BY number_of_customers DESC LIMIT 5;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
broker,basic_join_date_group_order_limit,"How many distinct customers made each type of transaction between Jan 1, 2023 and Mar 31, 2023 (inclusive of start and end dates)? Return the transaction type, number of distinct customers and average number of shares, for the top 3 transaction types by number of customers.","SELECT t.sbTxType, COUNT(DISTINCT t.sbTxCustId) AS num_customers, AVG(t.sbTxShares) AS avg_shares FROM sbTransaction t WHERE t.sbTxDateTime BETWEEN '2023-01-01' AND '2023-03-31 23:59:59' GROUP BY t.sbTxType ORDER BY num_customers DESC LIMIT 3",postgres,"SELECT 
  sbTxType, 
  COUNT(DISTINCT sbTxCustId) AS number_of_customers, 
  AVG(sbTxShares) AS average_number_of_shares
FROM 
  sbTransaction
WHERE ________(sbTxDateTime >= '2023-01-01' AND sbTxDateTime <= '2023-03-31')
GROUP BY sbTxType
ORDER BY number_of_customers DESC
LIMIT 3;",,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedFunction) function ________(boolean) does not exist
LINE 7: WHERE ________(sbTxDateTime >= '2023-01-01' AND sbTxDateTime...
              ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT 
  sbTxType, 
  COUNT(DISTINCT sbTxCustId) AS number_of_customers, 
  AVG(sbTxShares) AS average_number_of_shares
FROM 
  sbTransaction
WHERE ________(sbTxDateTime >= '2023-01-01' AND sbTxDateTime <= '2023-03-31')
GROUP BY sbTxType
ORDER BY number_of_customers DESC
LIMIT 3;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
broker,basic_join_date_group_order_limit,"What are the top 5 countries by total transaction amount in the past 30 days, inclusive of 30 days ago? Return the country name, number of transactions and total transaction amount.","SELECT c.sbCustCountry, COUNT(t.sbTxId) AS num_transactions, SUM(t.sbTxAmount) AS total_amount FROM sbCustomer c JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId WHERE t.sbTxDateTime >= CURRENT_DATE - INTERVAL '30 days' GROUP BY c.sbCustCountry ORDER BY total_amount DESC LIMIT 5",postgres,"SELECT sbTicker.sbTickerCountry, COUNT(sbTransaction.sbTxId) AS transaction_count, SUM(sbTransaction.sbTxAmount) AS total_transaction_amount
FROM sbTransaction
JOIN sbTicker ON sbTransaction.sbTxTickerId = sbTicker.sbTickerId
WHERE sbTransaction.sbTxDateTime >= CURRENT_DATE - interval '30 days'
GROUP BY sbTicker.sbTickerCountry
ORDER BY total_transaction_amount DESC
LIMIT 5;",,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column sbticker.sbtickercountry does not exist
LINE 1: SELECT sbTicker.sbTickerCountry, COUNT(sbTransaction.sbTxId)...
               ^

[SQL: SELECT sbTicker.sbTickerCountry, COUNT(sbTransaction.sbTxId) AS transaction_count, SUM(sbTransaction.sbTxAmount) AS total_transaction_amount
FROM sbTransaction
JOIN sbTicker ON sbTransaction.sbTxTickerId = sbTicker.sbTickerId
WHERE sbTransaction.sbTxDateTime >= CURRENT_DATE - interval '30 days'
GROUP BY sbTicker.sbTickerCountry
ORDER BY total_transaction_amount DESC
LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
broker,basic_join_distinct,Return the distinct list of customer IDs who have made a 'buy' transaction.,SELECT DISTINCT c.sbCustId FROM sbCustomer c JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId WHERE t.sbTxType = 'buy',postgres,SELECT DISTINCT sbTxCustId FROM sbTransaction WHERE sbTxType  =  'buy';,,,1,1,0,0,0,,0,,,,,,,,,,,,False
broker,basic_join_distinct,"Return the distinct list of ticker IDs that have daily price records on or after Apr 1, 2023.",SELECT DISTINCT tk.sbTickerId FROM sbTicker tk JOIN sbDailyPrice dp ON tk.sbTickerId = dp.sbDpTickerId WHERE dp.sbDpDate >= '2023-04-01',postgres,SELECT DISTINCT sbDpTickerId FROM sbDailyPrice WHERE sbDpDate >= '2023-04-01';,,,1,1,0,0,0,,0,,,,,,,,,,,,False
broker,basic_join_group_order_limit,"What are the top 10 ticker symbols by total transaction amount? Return the ticker symbol, number of transactions and total transaction amount.","SELECT tk.sbTickerSymbol, COUNT(tx.sbTxId) AS num_transactions, SUM(tx.sbTxAmount) AS total_amount FROM sbTicker tk JOIN sbTransaction tx ON tk.sbTickerId = tx.sbTxTickerId GROUP BY tk.sbTickerSymbol ORDER BY total_amount DESC LIMIT 10",postgres,"SELECT sbTicker.sbTickerSymbol, COUNT(sbTransaction.sbTxId) AS transaction_count, SUM(sbTransaction.sbTxAmount) AS total_transaction_amount
FROM sbTicker
JOIN sbTransaction ON sbTicker.sbTickerId = sbTransaction.sbTxTickerId
GROUP BY sbTicker.sbTickerSymbol
ORDER BY total_transaction_amount DESC
LIMIT 10;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
broker,basic_join_group_order_limit,"What are the top 5 combinations of customer state and ticker type by number of transactions? Return the customer state, ticker type and number of transactions.","SELECT c.sbCustState, t.sbTickerType, COUNT(*) AS num_transactions FROM sbTransaction tx JOIN sbCustomer c ON tx.sbTxCustId = c.sbCustId JOIN sbTicker t ON tx.sbTxTickerId = t.sbTickerId GROUP BY c.sbCustState, t.sbTickerType ORDER BY num_transactions DESC LIMIT 5",postgres,"SELECT sbCustState, sbTickerType, count(*) FROM sbTransaction GROUP BY sbCustState, sbTickerType ORDER BY count(*) DESC LIMIT 5;",,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""sbcuststate"" does not exist
LINE 1: SELECT sbCustState, sbTickerType, count(*) FROM sbTransactio...
               ^

[SQL: SELECT sbCustState, sbTickerType, count(*) FROM sbTransaction GROUP BY sbCustState, sbTickerType ORDER BY count(*) DESC LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
broker,basic_left_join,Return the customer ID and name of customers who have not made any transactions.,"SELECT c.sbCustId, c.sbCustName FROM sbCustomer c LEFT JOIN sbTransaction t ON c.sbCustId = t.sbTxCustId WHERE t.sbTxCustId IS NULL",postgres,"SELECT sbCustId,  sbCustName FROM sbCustomer EXCEPT SELECT sbTxCustId,  sbTxCustName FROM sbTransaction;",,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""sbtxcustname"" does not exist
LINE 1: ...stName FROM sbCustomer EXCEPT SELECT sbTxCustId,  sbTxCustNa...
                                                             ^
HINT:  Perhaps you meant to reference the column ""*SELECT* 1.sbcustname"".

[SQL: SELECT sbCustId,  sbCustName FROM sbCustomer EXCEPT SELECT sbTxCustId,  sbTxCustName FROM sbTransaction;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
broker,basic_left_join,Return the ticker ID and symbol of tickers that do not have any daily price records.,"SELECT tk.sbTickerId, tk.sbTickerSymbol FROM sbTicker tk LEFT JOIN sbDailyPrice dp ON tk.sbTickerId = dp.sbDpTickerId WHERE dp.sbDpTickerId IS NULL",postgres,"SELECT sbTickerId,  sbTickerSymbol FROM sbTicker WHERE sbTickerId NOT IN (SELECT sbTickerId FROM sbDailyPrice);",,,0,0,0,0,0,,0,,,,,,,,,,,,False
car_dealership,basic_group_order_limit,"What are the top 3 payment methods by total payment amount received? Return the payment method, total number of payments and total amount.","SELECT payment_method, COUNT(*) AS total_payments, SUM(payment_amount) AS total_amount FROM payments_received GROUP BY payment_method ORDER BY total_amount DESC LIMIT 3",postgres,"SELECT payment_method,  count(*),  sum(payment_amount) FROM payments_received GROUP BY payment_method ORDER BY sum(payment_amount) DESC LIMIT 3;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
car_dealership,basic_group_order_limit,"What are the total number of customer signups for the top 2 states? Return the state and total signups, starting from the top.","SELECT state, COUNT(*) AS total_signups FROM customers GROUP BY state ORDER BY total_signups DESC LIMIT 2",postgres,"SELECT state, count(*) FROM customers GROUP BY state ORDER BY count(*) DESC LIMIT 2;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
car_dealership,basic_join_date_group_order_limit,"Return the top 5 salespersons by number of sales in the past 30 days? Return their first and last name, total sales count and total revenue amount.","SELECT sp.first_name, sp.last_name, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue FROM sales s JOIN salespersons sp ON s.salesperson_id = sp.id WHERE s.sale_date >= CURRENT_DATE - INTERVAL '30 days' GROUP BY sp.first_name, sp.last_name, sp.id ORDER BY total_sales DESC LIMIT 5",postgres,"SELECT 
  s.first_name, 
  s.last_name, 
  count(*) AS total_sales, 
  sum(sale_price) AS total_revenue 
FROM 
  sales AS s 
JOIN 
  salespersons AS sp ON s.salesperson_id = sp.id 
WHERE 
  s.sale_date >= (current_date - interval '30 days') 
GROUP BY 
  s.first_name, 
  s.last_name 
ORDER BY _sales DESC 
LIMIT 5;",,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column s.first_name does not exist
LINE 2:   s.first_name, 
          ^
HINT:  Perhaps you meant to reference the column ""sp.first_name"".

[SQL: SELECT 
  s.first_name, 
  s.last_name, 
  count(*) AS total_sales, 
  sum(sale_price) AS total_revenue 
FROM 
  sales AS s 
JOIN 
  salespersons AS sp ON s.salesperson_id = sp.id 
WHERE 
  s.sale_date >= (current_date - interval '30 days') 
GROUP BY 
  s.first_name, 
  s.last_name 
ORDER BY _sales DESC 
LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
car_dealership,basic_join_date_group_order_limit,"Who were the top 3 sales representatives by total revenue in the past 3 months, inclusive of today's date? Return their first name, last name, total number of sales and total revenue.","SELECT c.first_name, c.last_name, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue FROM sales s JOIN salespersons c ON s.salesperson_id = c.id WHERE s.sale_date >= CURRENT_DATE - INTERVAL '3 months' GROUP BY c.first_name, c.last_name ORDER BY total_revenue DESC LIMIT 3",postgres,"SELECT 
  s.first_name, 
  s.last_name, 
  count(*) AS total_sales, 
  sum(p.payment_amount) AS total_revenue
FROM 
  sales AS s
JOIN 
  payments_received AS p ON s.id = p.sale_id
WHERE 
  p.payment_date >= CURRENT_DATE - interval '3 months'
GROUP BY 
  s.first_name, 
  s.last_name
ORDER BY 
  total_revenue DESC
LIMIT 3;",,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column s.first_name does not exist
LINE 2:   s.first_name, 
          ^

[SQL: SELECT 
  s.first_name, 
  s.last_name, 
  count(*) AS total_sales, 
  sum(p.payment_amount) AS total_revenue
FROM 
  sales AS s
JOIN 
  payments_received AS p ON s.id = p.sale_id
WHERE 
  p.payment_date >= CURRENT_DATE - interval '3 months'
GROUP BY 
  s.first_name, 
  s.last_name
ORDER BY 
  total_revenue DESC
LIMIT 3;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
car_dealership,basic_join_distinct,"Return the distinct list of customer IDs that have made a purchase, based on joining the customers and sales tables.",SELECT DISTINCT c.id AS customer_id FROM customers c JOIN sales s ON c.id = s.customer_id,postgres,SELECT DISTINCT customer_id FROM sales;,,,1,1,0,0,0,,0,,,,,,,,,,,,False
car_dealership,basic_join_distinct,"Return the distinct list of salesperson IDs that have received a cash payment, based on joining the salespersons, sales and payments_received tables.",SELECT DISTINCT s.id AS salesperson_id FROM salespersons s JOIN sales sa ON s.id = sa.salesperson_id JOIN payments_received p ON sa.id = p.sale_id WHERE p.payment_method = 'cash',postgres,SELECT DISTINCT salesperson_id FROM sales AS T1 JOIN payments_received AS T2 ON T1.sale_id  =  T2.id WHERE payment_method  =  'cash';,,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column t1.sale_id does not exist
LINE 1: ... FROM sales AS T1 JOIN payments_received AS T2 ON T1.sale_id...
                                                             ^
HINT:  Perhaps you meant to reference the column ""t2.sale_id"".

[SQL: SELECT DISTINCT salesperson_id FROM sales AS T1 JOIN payments_received AS T2 ON T1.sale_id  =  T2.id WHERE payment_method  =  'cash';]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
car_dealership,basic_join_group_order_limit,"Return the top 5 states by total revenue, showing the number of unique customers and total revenue for each state.","SELECT c.state, COUNT(DISTINCT s.customer_id) AS unique_customers, SUM(s.sale_price) AS total_revenue FROM sales s JOIN customers c ON s.customer_id = c.id GROUP BY c.state ORDER BY total_revenue DESC LIMIT 5",postgres,"SELECT 
  sales.state, 
  COUNT(DISTINCT customers.id) AS number_of_customers, 
  SUM(sales.sale_price) AS total_revenue
FROM 
  sales
JOIN 
  customers ON sales.customer_id = customers.id
GROUP BY 
  sales.state
ORDER BY _revenue DESC
LIMIT 5;",,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column sales.state does not exist
LINE 2:   sales.state, 
          ^

[SQL: SELECT 
  sales.state, 
  COUNT(DISTINCT customers.id) AS number_of_customers, 
  SUM(sales.sale_price) AS total_revenue
FROM 
  sales
JOIN 
  customers ON sales.customer_id = customers.id
GROUP BY 
  sales.state
ORDER BY _revenue DESC
LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
car_dealership,basic_join_group_order_limit,"What are the top 5 best selling car models by total revenue? Return the make, model, total number of sales and total revenue.","SELECT c.make, c.model, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue FROM sales s JOIN cars c ON s.car_id = c.id GROUP BY c.make, c.model ORDER BY total_revenue DESC LIMIT 5",postgres,"SELECT c.make, c.model, COUNT(s.id) AS total_sales, SUM(s.sale_price) AS total_revenue
FROM cars AS c
JOIN sales AS s ON c.id = s.car_id
GROUP BY c.make, c.model
ORDER BY total_revenue DESC
LIMIT 5;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
car_dealership,basic_left_join,"Return the car ID, make, model and year for cars that have no sales records, by doing a left join from the cars to sales table.","SELECT c.id AS car_id, c.make, c.model, c.year FROM cars c LEFT JOIN sales s ON c.id = s.car_id WHERE s.car_id IS NULL",postgres,"SELECT c.id, c.make, c.model, c.year FROM cars c LEFT JOIN sales s ON c.id = s.car_id WHERE s.id IS NULL;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
car_dealership,basic_left_join,"Return the salesperson ID, first name and last name for salespersons that have no sales records, by doing a left join from the salespersons to sales table.","SELECT s.id AS salesperson_id, s.first_name, s.last_name FROM salespersons s LEFT JOIN sales sa ON s.id = sa.salesperson_id WHERE sa.salesperson_id IS NULL",postgres,"SELECT T1.id,  T1.first_name,  T1.last_name FROM salespersons AS T1
LEFT JOIN sales AS T2 ON T1.id  =  T2.salesperson_id
WHERE T2.salesperson_id IS NULL;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
derm_treatment,basic_group_order_limit,What are the top 2 specialties by number of doctors? Return the specialty and number of doctors.,"SELECT specialty, COUNT(*) AS num_doctors FROM doctors GROUP BY specialty ORDER BY num_doctors DESC LIMIT 2",postgres,"SELECT specialty,  count(*) FROM doctors GROUP BY specialty ORDER BY count(*) DESC LIMIT 2;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
derm_treatment,basic_group_order_limit,"What are the top 3 insurance types by average patient height in cm? Return the insurance type, average height and average weight.","SELECT ins_type, AVG(height_cm) AS avg_height, AVG(weight_kg) AS avg_weight FROM patients GROUP BY ins_type ORDER BY avg_height DESC LIMIT 3",postgres,"SELECT ins_type, avg(height_cm), avg(weight_kg) FROM patients GROUP BY ins_type ORDER BY avg(height_cm) DESC, avg(weight_kg) DESC LIMIT 3;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
derm_treatment,basic_join_date_group_order_limit,"For treatments that ended in the year 2022 (from Jan 1st to Dec 31st inclusive), what is the average PASI score at day 100 and number of distinct patients per insurance type? Return the top 5 insurance types sorted by lowest average PASI score first.","SELECT p.ins_type, COUNT(DISTINCT t.patient_id) AS num_patients, AVG(o.day100_pasi_score) AS avg_pasi_score FROM treatments t JOIN patients p ON t.patient_id = p.patient_id JOIN outcomes o ON t.treatment_id = o.treatment_id WHERE t.end_dt BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.ins_type ORDER BY avg_pasi_score LIMIT 5",postgres,"SELECT 
  ins_type, 
  avg(day100_pasi_score) AS avg_pasi_score, 
  count(DISTINCT patient_id) AS num_patients
FROM 
  treatments 
JOIN 
  patients ON treatments.patient_id = patients.patient_id
WHERE 
  end_dt >= '2022-01-01' AND end_dt <= '2022-12-31'
GROUP BY 
  ins_type
ORDER BY 
  avg_pasi_score ASC NULLS LAST
LIMIT 5;",,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""day100_pasi_score"" does not exist
LINE 3:   avg(day100_pasi_score) AS avg_pasi_score, 
              ^

[SQL: SELECT 
  ins_type, 
  avg(day100_pasi_score) AS avg_pasi_score, 
  count(DISTINCT patient_id) AS num_patients
FROM 
  treatments 
JOIN 
  patients ON treatments.patient_id = patients.patient_id
WHERE 
  end_dt >= '2022-01-01' AND end_dt <= '2022-12-31'
GROUP BY 
  ins_type
ORDER BY 
  avg_pasi_score ASC NULLS LAST
LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
derm_treatment,basic_join_date_group_order_limit,"What are the top 3 doctor specialties by total drug amount prescribed for treatments started in the past 6 calendar months? Return the specialty, number of treatments, and total drug amount.","SELECT d.specialty, COUNT(*) AS num_treatments, SUM(t.tot_drug_amt) AS total_drug_amt FROM treatments t JOIN doctors d ON t.doc_id = d.doc_id WHERE t.start_dt >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '6 months') GROUP BY d.specialty ORDER BY total_drug_amt DESC LIMIT 3",postgres,"SELECT d.specialty, COUNT(t.treatment_id), SUM(t.tot_drug_amt)
FROM doctors AS d
JOIN treatments AS t ON d.doc_id  =  t.doc_id
WHERE t.start_dt >= (CURRENT_DATE - interval '6 month')
GROUP BY d.specialty
ORDER BY SUM(t.tot_drug_amt) DESC
LIMIT 3;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
derm_treatment,basic_join_distinct,"Return the distinct list of doctor IDs, first names and last names that have prescribed treatments.","SELECT DISTINCT d.doc_id, d.first_name, d.last_name FROM treatments t JOIN doctors d ON t.doc_id = d.doc_id",postgres,"SELECT DISTINCT t2.doc_id,  t1.first_name,  t1.last_name FROM doctors AS t1 JOIN treatments AS t2 ON t1.doc_id  =  t2.doc_id;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
derm_treatment,basic_join_distinct,"Return the distinct list of patient IDs, first names and last names that have outcome assessments.","SELECT DISTINCT p.patient_id, p.first_name, p.last_name FROM outcomes o JOIN treatments t ON o.treatment_id = t.treatment_id JOIN patients p ON t.patient_id = p.patient_id",postgres,"SELECT DISTINCT T1.patient_id,  T1.first_name,  T1.last_name FROM patients AS T1 JOIN outcomes AS T2 ON T1.patient_id  =  T2.treatment_id;",,,0,0,0,0,0,,0,,,,,,,,,,,,False
derm_treatment,basic_join_group_order_limit,"What are the top 3 diagnoses by maximum itch VAS score at day 100 and number of distinct patients? Return the diagnosis name, number of patients, and maximum itch score.","SELECT di.diag_name, COUNT(DISTINCT t.patient_id) AS num_patients, MAX(o.day100_itch_vas) AS max_itch_score FROM treatments t JOIN diagnoses di ON t.diag_id = di.diag_id JOIN outcomes o ON t.treatment_id = o.treatment_id GROUP BY di.diag_name ORDER BY max_itch_score DESC, num_patients DESC LIMIT 3",postgres,"SELECT 
  d.diag_name, 
  COUNT(DISTINCT t.patient_id) AS number_of_patients, 
  MAX(o.day100_itch_vas) AS maximum_itch_vas_score
FROM 
  diagnoses AS d
JOIN 
  treatments AS t ON d.diag_id  =  t.diag_id
JOIN _OUTCOME AS o ON t.treatment_id  =  o.treatment_id
WHERE 
  o.day100_itch_vas  =  (SELECT MAX(day100_itch_vas) FROM OUTCOME)
GROUP BY 
  d.diag_name
ORDER BY 
  number_of_patients DESC, 
  maximum_itch_vas_score DESC
LIMIT 3;",,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedTable) relation ""_outcome"" does not exist
LINE 9: JOIN _OUTCOME AS o ON t.treatment_id  =  o.treatment_id
             ^

[SQL: SELECT 
  d.diag_name, 
  COUNT(DISTINCT t.patient_id) AS number_of_patients, 
  MAX(o.day100_itch_vas) AS maximum_itch_vas_score
FROM 
  diagnoses AS d
JOIN 
  treatments AS t ON d.diag_id  =  t.diag_id
JOIN _OUTCOME AS o ON t.treatment_id  =  o.treatment_id
WHERE 
  o.day100_itch_vas  =  (SELECT MAX(day100_itch_vas) FROM OUTCOME)
GROUP BY 
  d.diag_name
ORDER BY 
  number_of_patients DESC, 
  maximum_itch_vas_score DESC
LIMIT 3;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
derm_treatment,basic_join_group_order_limit,"What are the top 5 drugs by number of treatments and average drug amount per treatment? Return the drug name, number of treatments, and average drug amount.","SELECT d.drug_name, COUNT(*) AS num_treatments, AVG(t.tot_drug_amt) AS avg_drug_amt FROM treatments t JOIN drugs d ON t.drug_id = d.drug_id GROUP BY d.drug_name ORDER BY num_treatments DESC, avg_drug_amt DESC LIMIT 5",postgres,"SELECT 
  d.drug_name, 
  COUNT(t.treatment_id) AS num_treatments, 
  AVG(t.tot_drug_amt) AS avg_drug_amount
FROM 
  drugs AS d
JOIN 
  treatments AS t ON d.drug_id  =  t.drug_id
GROUP BY 
  d.drug_name
ORDER BY 
  num_treatments DESC, 
  avg_drug_amount DESC
LIMIT 5;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
derm_treatment,basic_left_join,Return the drug IDs and names of drugs that have not been used in any treatments.,"SELECT d.drug_id, d.drug_name FROM drugs d LEFT JOIN treatments t ON d.drug_id = t.drug_id WHERE t.drug_id IS NULL",postgres,"SELECT drug_id,  drug_name FROM drugs WHERE drug_id NOT IN (SELECT drug_id FROM treatments);",,,1,1,0,0,0,,0,,,,,,,,,,,,False
derm_treatment,basic_left_join,"Return the patient IDs, first names and last names of patients who have not received any treatments.","SELECT p.patient_id, p.first_name, p.last_name FROM patients p LEFT JOIN treatments t ON p.patient_id = t.patient_id WHERE t.patient_id IS NULL",postgres,"SELECT T1.patient_id,  T1.first_name,  T1.last_name FROM patients AS T1 WHERE NOT EXISTS (SELECT 1 FROM treatments AS T2 WHERE T1.patient_id  =  T2.patient_id);",,,1,1,0,0,0,,0,,,,,,,,,,,,False
ewallet,basic_group_order_limit,What are the top 2 most frequently used device types for user sessions and their respective counts?,"SELECT device_type, COUNT(*) AS COUNT FROM consumer_div.user_sessions GROUP BY device_type ORDER BY COUNT DESC LIMIT 2",postgres,"SELECT device_type, COUNT(*) FROM consumer_div.user_sessions GROUP BY device_type ORDER BY COUNT(*) DESC LIMIT 2;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
ewallet,basic_group_order_limit,What are the top 3 most common transaction statuses and their respective counts?,"SELECT status, COUNT(*) AS COUNT FROM consumer_div.wallet_transactions_daily GROUP BY status ORDER BY COUNT DESC LIMIT 3",postgres,"SELECT status, count(*) FROM consumer_div.wallet_transactions_daily GROUP BY status ORDER BY count(*) DESC LIMIT 3;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
ewallet,basic_join_date_group_order_limit,"How many distinct active users sent money per month in 2023? Return the number of active users per month (as a date), starting from the earliest date. Do not include merchants in the query. Only included successful transactions.","SELECT DATE_TRUNC('month', t.created_at) AS MONTH, COUNT(DISTINCT t.sender_id) AS active_users FROM consumer_div.wallet_transactions_daily t JOIN consumer_div.users u ON t.sender_id = u.uid WHERE t.sender_type = 0 AND t.status = 'success' AND u.status = 'active' AND t.created_at >= '2023-01-01' AND t.created_at < '2024-01-01' GROUP BY MONTH ORDER BY MONTH",postgres,"SELECT 
  DATE_TRUNC('month', wtd.created_at) AS month, 
  COUNT(DISTINCT wtd.sender_id) AS num_active_users
FROM 
  consumer_div.wallet_transactions_daily AS wtd
WHERE 
  wtd.created_at >= '2023-01-01' AND wtd.created_at < '2024-01-01' AND wtd.status ='success'
GROUP BY 
  DATE_TRUNC('month', wtd.created_at)
ORDER BY 
  month;",,,0,0,0,0,0,,0,,,,,,,,,,,,False
ewallet,basic_join_date_group_order_limit,"Who are the top 5 merchants (receiver type 1) by total transaction amount in the past 30 days (inclusive of 30 days ago)? Return the merchant name, total number of transactions, and total transaction amount.","SELECT m.name AS merchant_name, COUNT(t.txid) AS total_transactions, SUM(t.amount) AS total_amount FROM consumer_div.merchants m JOIN consumer_div.wallet_transactions_daily t ON m.mid = t.receiver_id WHERE t.receiver_type = 1 AND t.created_at >= CURRENT_DATE - INTERVAL '30 days' GROUP BY m.name ORDER BY total_amount DESC LIMIT 5",postgres,"SELECT 
  merchants.name, 
  COUNT(wallet_transactions_daily.*) AS total_transactions, 
  SUM(wallet_transactions_daily.amount) AS total_transaction_amount
FROM 
  consumer_div.merchants AS merchants
JOIN 
  consumer_div.wallet_transactions_daily AS wallet_transactions_daily
ON 
  wallet_transactions_daily.receiver_id = merchants.mid
WHERE 
  wallet_transactions_daily.created_at >= CURRENT_DATE - interval '30 days'
  AND wallet_transactions_daily.receiver_type = 1
GROUP BY 
  merchants.name
ORDER BY 
  total_transaction_amount DESC
LIMIT 5;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
ewallet,basic_join_distinct,Return the distinct list of merchant IDs that have received money from a transaction. Include all transaction types in the results you return.,SELECT DISTINCT m.mid AS merchant_id FROM consumer_div.merchants m JOIN consumer_div.wallet_transactions_daily t ON m.mid = t.receiver_id WHERE t.receiver_type = 1,postgres,"SELECT DISTINCT wtd.merchant_id, wtd.type FROM consumer_div.wallet_transactions_daily AS wtd;",,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column wtd.merchant_id does not exist
LINE 1: SELECT DISTINCT wtd.merchant_id, wtd.type FROM consumer_div....
                        ^

[SQL: SELECT DISTINCT wtd.merchant_id, wtd.type FROM consumer_div.wallet_transactions_daily AS wtd;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
ewallet,basic_join_distinct,Return the distinct list of user IDs who have received transaction notifications.,SELECT DISTINCT user_id FROM consumer_div.notifications WHERE type = 'transaction',postgres,SELECT DISTINCT receiver_id FROM consumer_div.notifications WHERE type = 'transaction';,,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""receiver_id"" does not exist
LINE 1: SELECT DISTINCT receiver_id FROM consumer_div.notifications ...
                        ^

[SQL: SELECT DISTINCT receiver_id FROM consumer_div.notifications WHERE type = 'transaction';]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
ewallet,basic_join_group_order_limit,"What are the top 3 most frequently used coupon codes? Return the coupon code, total number of redemptions, and total amount redeemed.","SELECT c.code AS coupon_code, COUNT(t.txid) AS redemption_count, SUM(t.amount) AS total_discount FROM consumer_div.coupons c JOIN consumer_div.wallet_transactions_daily t ON c.cid = t.coupon_id GROUP BY c.code ORDER BY redemption_count DESC LIMIT 3",postgres,"SELECT c.code, COUNT(wt.*) AS total_redemptions, SUM(wt.amount) AS total_amount_redeemed
FROM consumer_div.coupons AS c
JOIN consumer_div.wallet_transactions_daily AS wt ON c.cid  =  wt.coupon_id
GROUP BY c.code
ORDER BY total_redemptions DESC, total_amount_redeemed DESC
LIMIT 3;",,,0,1,0,0,0,,0,,,,,,,,,,,,False
ewallet,basic_join_group_order_limit,"Which are the top 5 countries by total transaction amount sent by users, sender_type = 0? Return the country, number of distinct users who sent, and total transaction amount.","SELECT u.country, COUNT(DISTINCT t.sender_id) AS user_count, SUM(t.amount) AS total_amount FROM consumer_div.users u JOIN consumer_div.wallet_transactions_daily t ON u.uid = t.sender_id WHERE t.sender_type = 0 GROUP BY u.country ORDER BY total_amount DESC LIMIT 5",postgres,"SELECT 
  country, 
  COUNT(DISTINCT sender_id) AS number_of_users, 
  SUM(amount) AS total_transaction_amount
FROM 
  consumer_div.wallet_transactions_daily
WHERE 
  sender_type = 0
GROUP BY 
  country
ORDER BY 
  total_transaction_amount DESC
LIMIT 5;",,"QUERY EXECUTION ERROR: (psycopg2.errors.UndefinedColumn) column ""country"" does not exist
LINE 2:   country, 
          ^

[SQL: SELECT 
  country, 
  COUNT(DISTINCT sender_id) AS number_of_users, 
  SUM(amount) AS total_transaction_amount
FROM 
  consumer_div.wallet_transactions_daily
WHERE 
  sender_type = 0
GROUP BY 
  country
ORDER BY 
  total_transaction_amount DESC
LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)",0,0,0,1,0,,0,,,,,,,,,,,,False
ewallet,basic_left_join,Return merchants (merchant ID and name) who have not issued any coupons.,"SELECT m.mid AS merchant_id, m.name AS merchant_name FROM consumer_div.merchants m LEFT JOIN consumer_div.coupons c ON m.mid = c.merchant_id WHERE c.cid IS NULL",postgres,"SELECT T1.mid,  T1.name FROM consumer_div.merchants AS T1
LEFT JOIN consumer_div.coupons AS T2 ON T1.mid  =  T2.merchant_id
WHERE T2.merchant_id IS NULL;",,,1,1,0,0,0,,0,,,,,,,,,,,,False
ewallet,basic_left_join,Return users (user ID and username) who have not received any notifications,"SELECT u.uid, u.username FROM consumer_div.users u LEFT JOIN consumer_div.notifications n ON u.uid = n.user_id WHERE n.id IS NULL",postgres,"SELECT u.uid,  u.username FROM consumer_div.users u 
WHERE u.uid NOT IN (SELECT n.user_id FROM consumer_div.notifications n);",,,1,1,0,0,0,,0,,,,,,,,,,,,False
